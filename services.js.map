{"version": 3, "mappings": "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", "sources": ["services.py"], "names": ["r", "requests", "requests.get", "url", "USERNAME", "PASSWORD", "r.raise_for_status", "data", "requests.post", "json", "json.dumps", "r.json", "requests.delete", "webS", "websocket", "websocket.create_connection", "resp", "base64", "base64.b64decode", "webS.recv", "webS.close", "get", "HOST", "URL_SERVICE", "service_id", "print_json", "newest", "index", "service", "name", "get(((HOST + \"/services?name=\") + name)).json", "environment", "get(((HOST + \"/project?name=\") + name)).json", "start_service", "containers", "get((((HOST + URL_SERVICE) + service_id) + \"/instances\")).json", "start_url", "container", "post", "stop_url", "restart_url", "upgrade_strategy", "json.loads", "batch_size", "interval_millis", "start_first", "current_service_config", "complete_previous", "sleep_count", "timeout", "time", "time.sleep", "sys", "sys.exit", "replace_env_name", "replace_env_value", "imageUuid", "auto_complete", "upgraded_sleep_count", "containers.length", "execution_url", "command", "payload", "payload[\"command\"].append", "intermediate", "ws_token", "ws_url", "ws", "URL_ENVIRONMENT", "environment_id", "current_environment_config", "delete", "__name__", "os", "os.environ", "os.environ[\"SSL_VERIFY\"].lower", "kwargs", "baker", "baker.run"], "sourcesContent": ["#!/usr/bin/env python\nimport baker\nimport json\nimport requests\nimport sys\nimport time\nimport websocket\nimport base64\nfrom http.server import HTTPServer\n\nHOST = \"http://rancher.local:8080/v1\"\nURL_SERVICE = \"/services/\"\nURL_ENVIRONMENT = \"/projects/\"\nUSERNAME = \"userid\"\nPASSWORD = \"password\"\nkwargs = {}\n\n# HTTP\ndef get(url):\n   r = requests.get(url, auth=(USERNAME, PASSWORD))\n   r.raise_for_status()\n   return r\n\ndef post(url, data=\"\"):\n   if data:\n      r = requests.post(url, data=json.dumps(data), auth=(USERNAME, PASSWORD))\n   else:\n      r = requests.post(url, data=\"\", auth=(USERNAME, PASSWORD))\n   r.raise_for_status()\n   return r.json()\n\ndef delete(url, data=\"\"):\n   if data:\n      r = requests.delete(url, data=json.dumps(data), auth=(USERNAME, PASSWORD))\n   else:\n      r = requests.delete(url, data=\"\", auth=(USERNAME, PASSWORD))\n   r.raise_for_status()\n   return r.json()\n\n# Websocket\ndef ws(url):\n  webS = websocket.create_connection(url)\n  resp = base64.b64decode( webS.recv() )\n  webS.close()\n  return resp\n\n# Helper\ndef print_json(data):\n   print(json.dumps(data, sort_keys=True, indent=3, separators=(',', ': ')))\n\n\n#\n# Query the service configuration.\n#\n#@baker.command(default=True, params={\"service_id\": \"The ID of the service to read (optional)\"})\ndef query(service_id=\"\"):\n   \"\"\"Retrieves the service information.\n\n   If you don't specify an ID, data for all services\n   will be retrieved.\n   \"\"\"\n\n   r = get(HOST + URL_SERVICE + service_id)\n   print_json(r.json())\n\n\n\n#\n# Converts a service name into an ID\n#\n#@baker.command(params={\n#                        \"name\": \"The name of the service to lookup.\",\n#                        \"newest\": \"From list of IDs, return newest (optional)\"})\ndef id_of (name=\"\", newest=False):\n   \"\"\"Retrieves the ID of a service, given its name.\n   \"\"\"\n   if newest:\n    index = -1\n   else:\n    index = 0\n\n   service = get(HOST + \"/services?name=\" + name).json()\n   return service['data'][index]['id']\n\n#\n# Converts a environment name into an ID\n#\n#@baker.command(params={\"name\": \"The name of the environment to lookup.\"})\ndef id_of_env (name=\"\"):\n   \"\"\"Retrieves the ID of a project, given its name.\n   \"\"\"\n\n   environment = get(HOST + \"/project?name=\" + name).json()\n   return environment['data'][0]['id']\n\n#\n# Start containers within a service (e.g. for Start Once containers).\n#\n#@baker.command(params={\"service_id\": \"The ID of the service to start the containers of.\"})\ndef start_containers (service_id):\n   \"\"\"Starts the containers of a given service, typically a Start Once service.\n   \"\"\"\n   start_service (service_id)\n\n#\n# Start containers within a service (e.g. for Start Once containers).\n#\n#@baker.command(params={\"service_id\": \"The ID of the service to start the containers of.\"})\ndef start_service (service_id):\n   \"\"\"Starts the containers of a given service, typically a Start Once service.\n   \"\"\"\n\n   # Get the array of containers\n   containers = get(HOST + URL_SERVICE + service_id + \"/instances\").json()['data']\n   for container in containers:\n      start_url = container['actions']['start']\n      print(\"Starting container %s with url %s\" % (container['name'], start_url))\n      post(start_url, \"\")\n\n\n#\n# Stop containers within a service.\n#\n#@baker.command(params={\"service_id\": \"The ID of the service to stop the containers of.\"})\ndef stop_service (service_id):\n   \"\"\"Stop the containers of a given service.\n   \"\"\"\n\n   # Get the array of containers\n   containers = get(HOST + URL_SERVICE + service_id + \"/instances\").json()['data']\n   for container in containers:\n      stop_url = container['actions']['stop']\n      print(\"Stopping container %s with url %s\" % (container['name'], stop_url))\n      post(stop_url, \"\")\n\n\n#\n# Restart containers within a service\n#\n#@baker.command(params={\"service_id\": \"The ID of the service to restart the containers of.\"})\ndef restart_service(service_id):\n  \"\"\"Restart the containers of a given service.\n  \"\"\"\n\n  # Get the array of containers\n  containers = get(HOST + URL_SERVICE + service_id + \"/instances\").json()['data']\n  for container in containers:\n      restart_url = container['actions']['restart']\n      print(\"Restarting container: \" + container['name'])\n      post(restart_url)\n\n\n#\n# Upgrades the service.\n#\n#@baker.command(params={\n#                        \"service_id\": \"The ID of the service to upgrade.\",\n#                        \"start_first\": \"Whether or not to start the new instance first before stopping the old one.\",\n#                        \"complete_previous\": \"If set and the service was previously upgraded but the upgrade wasn't completed, it will be first marked as Finished and then the upgrade will occur.\",\n#                        \"imageUuid\": \"If set the config will be overwritten to use new image. Don't forget Rancher Formatting 'docker:<Imagename>:tag'\",\n#                        \"auto_complete\": \"Set this to automatically 'finish upgrade' once upgrade is complete\",\n#                        \"replace_env_name\": \"The name of an environment variable to be changed in the launch config (requires replace_env_value).\",\n#                        \"replace_env_value\": \"The value of the environment variable to be replaced (requires replace_env_name).\",\n#                        \"timeout\": \"How many seconds to wait until an upgrade fails\"\n#                       })\ndef upgrade(service_id, start_first=True, complete_previous=False, imageUuid=None, auto_complete=False,\n            batch_size=1, interval_millis=10000, replace_env_name=None, replace_env_value=None, timeout=60):\n   \"\"\"Upgrades a service\n\n   Performs a service upgrade, keeping the same configuration, but otherwise\n   pulling new image as needed and starting new containers, dropping the old\n   ones.\n   \"\"\"\n\n   upgrade_strategy = json.loads('{\"inServiceStrategy\": {\"batchSize\": 1,\"intervalMillis\": 10000,\"startFirst\": true,\"launchConfig\": {},\"secondaryLaunchConfigs\": []}}')\n   upgrade_strategy['inServiceStrategy']['batchSize'] = batch_size\n   upgrade_strategy['inServiceStrategy']['intervalMillis'] = interval_millis\n   if start_first:\n      upgrade_strategy['inServiceStrategy']['startFirst'] = \"true\"\n   else:\n      upgrade_strategy['inServiceStrategy']['startFirst'] = \"false\"\n\n   r = get(HOST + URL_SERVICE + service_id)\n   current_service_config = r.json()\n\n   # complete previous upgrade flag on\n   if complete_previous and current_service_config['state'] == \"upgraded\":\n      print(\"Previous service upgrade wasn't completed, completing it now...\")\n      post(HOST + URL_SERVICE + service_id + \"?action=finishupgrade\", \"\")\n      r = get(HOST + URL_SERVICE + service_id)\n      current_service_config = r.json()\n\n      sleep_count = 0\n      while current_service_config['state'] != \"active\" and sleep_count < timeout / 2:\n         print(\"Waiting for upgrade to finish...\")\n         time.sleep (2)\n         r = get(HOST + URL_SERVICE + service_id)\n         current_service_config = r.json()\n         sleep_count += 1\n\n   # can't upgrade a service if it's not in active state\n   if current_service_config['state'] != \"active\":\n      print(\"Service cannot be updated due to its current state: %s\" % current_service_config['state'])\n      sys.exit(1)\n\n   # Stuff the current service launch config into the request for upgrade\n   upgrade_strategy['inServiceStrategy']['launchConfig'] = current_service_config['launchConfig']\n\n\n   # replace the environment variable specified (if one was)\n   if replace_env_name != None and replace_env_value != None:\n      print(\"Replacing environment variable %s from %s to %s\" % (replace_env_name, upgrade_strategy['inServiceStrategy']['launchConfig']['environment'][replace_env_name], replace_env_value))\n      upgrade_strategy['inServiceStrategy']['launchConfig']['environment'][replace_env_name] = replace_env_value\n\n\n   if imageUuid != None:\n      # place new image into config\n      upgrade_strategy['inServiceStrategy']['launchConfig']['imageUuid'] = imageUuid\n      print(\"New Image: %s\" % upgrade_strategy['inServiceStrategy']['launchConfig']['imageUuid'])\n\n   # post the upgrade request\n   post(current_service_config['actions']['upgrade'], upgrade_strategy)\n\n   print(\"Upgrade of %s service started!\" % current_service_config['name'])\n\n   r = get(HOST + URL_SERVICE + service_id)\n   current_service_config = r.json()\n\n   print(\"Service State '%s.'\" % current_service_config['state'])\n\n   print(\"Waiting for upgrade to finish...\")\n   sleep_count = 0\n   while current_service_config['state'] != \"upgraded\" and sleep_count < timeout / 2:\n         print(\".\")\n         time.sleep (2)\n         r = get(HOST + URL_SERVICE + service_id)\n         current_service_config = r.json()\n         sleep_count += 1\n\n   if sleep_count >= timeout / 2:\n      print(\"Upgrading take to much time! Check Rancher UI for more details.\")\n      sys.exit(1)\n   else:\n      print(\"Upgraded\")\n\n   if auto_complete and current_service_config['state'] == \"upgraded\":\n      post(HOST + URL_SERVICE + service_id + \"?action=finishupgrade\", \"\")\n      r = get(HOST + URL_SERVICE + service_id)\n      current_service_config = r.json()\n      print(\"Auto Finishing Upgrade...\")\n\n      upgraded_sleep_count = 0\n      while current_service_config['state'] != \"active\" and upgraded_sleep_count < timeout / 2:\n         print(\".\")\n         time.sleep (2)\n         r = get(HOST + URL_SERVICE + service_id)\n         current_service_config = r.json()\n         upgraded_sleep_count += 1\n\n      if current_service_config['state'] == \"active\":\n         print(\"DONE\")\n\n      else:\n         print(\"Something has gone wrong!  Check Rancher UI for more details.\")\n         sys.exit(1)\n\n\n#\n# Execute remote command on container.\n#\n#@baker.command(params={\n#                        \"service_id\": \"The ID of the service to execute on\",\n#                        \"command\": \"The command to execute\"\n#                      })\ndef execute(service_id,command):\n  \"\"\"Execute remote command\n\n  Executes a command on one container of the service you specified.\n  \"\"\"\n\n  # Get the array of containers\n  containers = get(HOST + URL_SERVICE + service_id + \"/instances\").json()['data']\n\n  # guard we have at least one container available\n  if len(containers) <= 0:\n    print(\"No container available\")\n    sys.exit(1)\n\n  # take the first (random) container to execute the command on\n  execution_url = containers[0]['actions']['execute']\n  print(\"Executing '%s' on container '%s'\" % (command, containers[0]['name']))\n\n  # prepare post payload\n  payload = json.loads('{\"attachStdin\": true,\"attachStdout\": true,\"command\": [\"/bin/sh\",\"-c\"],\"tty\": true}')\n  payload['command'].append(command)\n\n  # call execution action -> returns token and url for websocket access\n  intermediate = post(execution_url,payload)\n\n  ws_token = intermediate['token']\n  ws_url = intermediate['url'] + \"?token=\" + ws_token\n\n  # call websocket and print answer\n  print(\"> \\n%s\" % ws(ws_url))\n\n  print(\"DONE\")\n\n\n\n#\n# Rollback the service.\n#\n#@baker.command(params={\n#                        \"service_id\": \"The ID of the service to rollback.\",\n#                        \"timeout\": \"How many seconds to wait until an rollback fails\"\n#                       })\ndef rollback(service_id, timeout=60):\n   \"\"\"Performs a service rollback\n   \"\"\"\n\n   r = get(HOST + URL_SERVICE + service_id)\n   current_service_config = r.json()\n\n   # can't rollback a service if it's not in upgraded state\n   if current_service_config['state'] != \"upgraded\":\n      print(\"Service cannot be updated due to its current state: %s\" % current_service_config['state'])\n      sys.exit(1)\n\n   # post the rollback request\n   post(current_service_config['actions']['rollback'], \"\");\n\n   print(\"Rollback of %s service started!\" % current_service_config['name'])\n\n   r = get(HOST + URL_SERVICE + service_id)\n   current_service_config = r.json()\n\n   print(\"Service State '%s.'\" % current_service_config['state'])\n\n   print(\"Waiting for rollback to finish...\")\n   sleep_count = 0\n   while current_service_config['state'] != \"active\" and sleep_count < timeout / 2:\n         print(\".\")\n         time.sleep (2)\n         r = get(HOST + URL_SERVICE + service_id)\n         current_service_config = r.json()\n         sleep_count += 1\n\n   if sleep_count >= timeout / 2:\n      print(\"Rolling back take to much time! Check Rancher UI for more details.\")\n      sys.exit(1)\n   else:\n      print(\"Rolled back\")\n\n\n#\n# Activate a service.\n#\n#@baker.command(params={\"service_id\": \"The ID of the service to activate.\",\n#                        \"timeout\": \"How many seconds to wait until an upgrade fails\"})\ndef activate (service_id, timeout=60):\n   \"\"\"Activate the containers of a given service.\n   \"\"\"\n\n   r = get(HOST + URL_SERVICE + service_id)\n   current_service_config = r.json()\n\n   # can't activate a service if it's not in inactive state\n   if current_service_config['state'] != \"inactive\":\n      print(\"Service cannot be deactivated due to its current state: %s\" % current_service_config['state'])\n      sys.exit(1)\n\n   post(current_service_config['actions']['activate'], \"\");\n\n   # Wait Activation to finish\n   sleep_count = 0\n   while current_service_config['state'] != \"active\" and sleep_count < timeout / 2:\n      print(\"Waiting for activation to finish...\")\n      time.sleep (2)\n      r = get(HOST + URL_SERVICE + service_id)\n      current_service_config = r.json()\n      sleep_count += 1\n\n\n#\n# Deactivate a service.\n#\n#@baker.command(params={\"service_id\": \"The ID of the service to deactivate.\",\n#                        \"timeout\": \"How many seconds to wait until an upgrade fails\"})\ndef deactivate (service_id, timeout=60):\n   \"\"\"Stops the containers of a given service. (e.g. for maintenance purposes)\n   \"\"\"\n\n   r = get(HOST + URL_SERVICE + service_id)\n   current_service_config = r.json()\n\n   # can't deactivate a service if it's not in active state\n   if current_service_config['state'] != \"active\" and current_service_config['state'] != \"updating-active\":\n      print(\"Service cannot be deactivated due to its current state: %s\" % current_service_config['state'])\n      sys.exit(1)\n\n   post(current_service_config['actions']['deactivate'], \"\");\n\n   # Wait deactivation to finish\n   sleep_count = 0\n   while current_service_config['state'] != \"inactive\" and sleep_count < timeout / 2:\n      print(\"Waiting for deactivation to finish...\")\n      time.sleep (2)\n      r = get(HOST + URL_SERVICE + service_id)\n      current_service_config = r.json()\n      sleep_count += 1\n\n#\n# Deactivate a env.\n#\n#@baker.command(params={\"environment_id\": \"The ID of the environment to deactivate.\",\n#                        \"timeout\": \"How many seconds to wait until an upgrade fails\"})\ndef deactivate_env (environment_id, timeout=60):\n   \"\"\"Stops the environment\n   \"\"\"\n\n   r = get(HOST + URL_ENVIRONMENT + environment_id )\n   current_environment_config = r.json()\n\n   # can't deactivate a service if it's not in active state\n   if current_environment_config['state'] != \"active\":\n      print(\"Environment cannot be deactivated due to its current state: %s\" % current_environment_config['state'])\n      sys.exit(1)\n\n   post(current_environment_config['actions']['deactivate'], \"\");\n\n   # Wait deactivation to finish\n   sleep_count = 0\n   while current_environment_config['state'] != \"inactive\" and sleep_count < timeout / 2:\n      print(\"Waiting for deactivation to finish...\")\n      time.sleep (2)\n      r = get(HOST + URL_ENVIRONMENT + environment_id)\n      current_environment_config = r.json()\n      sleep_count += 1\n\n#\n# Delete a env.\n#\n#@baker.command(params={\"environment_id\": \"The ID of the environment to delete.\",\n#                        \"timeout\": \"How many seconds to wait until an upgrade fails\"})\ndef delete_env (environment_id, timeout=60):\n   \"\"\"Stops the environment\n   \"\"\"\n\n   r = get(HOST + URL_ENVIRONMENT + environment_id )\n   current_environment_config = r.json()\n\n   # can't deactivate a service if it's not in active state\n   if current_environment_config['state'] != \"inactive\":\n      print(\"Environment cannot be deactivated due to its current state: %s\" % current_environment_config['state'])\n      sys.exit(1)\n\n   delete(current_environment_config['actions']['delete'], \"\");\n\n   # Wait deactivation to finish\n   sleep_count = 0\n   while current_environment_config['state'] != \"removed\" and sleep_count < timeout / 2:\n      print(\"Waiting for delete to finish...\")\n      time.sleep (2)\n      r = get(HOST + URL_ENVIRONMENT + environment_id)\n      current_environment_config = r.json()\n      sleep_count += 1\n\n#\n# Remove a service.\n#\n#@baker.command(params={\"service_id\": \"The ID of the service to remove.\",\n#                        \"timeout\": \"How many seconds to wait until an upgrade fails\"})\ndef remove (service_id, timeout=60):\n   \"\"\"Remove the service\n   \"\"\"\n\n   r = get(HOST + URL_SERVICE + service_id)\n   current_service_config = r.json()\n\n   # can't remove a service if it's not in inactive state\n   if current_service_config['state'] != \"inactive\":\n      print(\"Service cannot be removed due to its current state: %s\" % current_service_config['state'])\n      sys.exit(1)\n\n   post(current_service_config['actions']['remove'], \"\");\n\n   # Wait remove to finish\n   sleep_count = 0\n   while current_service_config['state'] != \"removed\" and sleep_count < timeout / 2:\n      print(\"Waiting for remove to finish...\")\n      time.sleep (2)\n      r = get(HOST + URL_SERVICE + service_id)\n      current_service_config = r.json()\n      sleep_count += 1\n\n\n#\n# Get a service state\n#\n#@baker.command(default=True, params={\"service_id\": \"The ID of the service to read\"})\ndef state(service_id=\"\"):\n   \"\"\"Retrieves the service state information.\n   \"\"\"\n\n   r = get(HOST + URL_SERVICE + service_id)\n   print((r.json()[\"state\"]))\n\n\n#\n# Script's entry point, starts Baker to execute the commands.\n# Attempts to read environment variables to configure the program.\n#\nif __name__ == '__main__':\n   import os\n\n   # support for new Rancher agent services\n   # http://docs.rancher.com/rancher/latest/en/rancher-services/service-accounts/\n   if 'CATTLE_ACCESS_KEY' in os.environ:\n      USERNAME = os.environ['CATTLE_ACCESS_KEY']\n\n   if 'CATTLE_SECRET_KEY' in os.environ:\n      PASSWORD = os.environ['CATTLE_SECRET_KEY']\n\n   if 'CATTLE_URL' in os.environ:\n      HOST = os.environ['CATTLE_URL']\n\n   if 'RANCHER_ACCESS_KEY' in os.environ:\n      USERNAME = os.environ['RANCHER_ACCESS_KEY']\n\n   if 'RANCHER_SECRET_KEY' in os.environ:\n      PASSWORD = os.environ['RANCHER_SECRET_KEY']\n\n   if 'RANCHER_URL' in os.environ:\n      HOST = os.environ['RANCHER_URL']\n\n   if 'SSL_VERIFY' in os.environ:\n      if os.environ['SSL_VERIFY'].lower() == \"false\":\n        kwargs['verify'] = False\n      else:\n        kwargs['verify'] = os.environ['SSL_VERIFY']\n\n   # make sure host ends with v1 if it is not contained in host\n   if '/v1' not in HOST:\n      HOST = HOST + '/v1'\n\n   baker.run()\n"]}